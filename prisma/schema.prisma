generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Modality {
  Atacado
  Varejo
}

enum CustomerType {
  PF_CPF
  PJ_CNPJ
}

model Customer {
  id        Int          @id @default(autoincrement())
  name      String
  type      CustomerType @default(PJ_CNPJ)
  document  String       @unique
  contact   String?
  email     String?      @unique
  address   String?
  note      String?
  modality  Modality
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  orders Order[]

  @@map("customers")
}

enum Category {
  BOLOS
  DOCINHOS
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  fotoUrl     String?

  category      Category
  costPrice     Float    @default(0)
  markupPercent Float    @default(0)
  salePrice     Float    @default(0)
  stockQuantity Int      @default(0)
  isActive      Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  userId Int?  @default(1)
  user   User? @relation(fields: [userId], references: [id])

  orderDate    DateTime  @default(now())
  deliveryDate DateTime?
  status       String    @default("PENDING")
  notes        String?
  total        Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity  Int   @default(1)
  unitPrice Float
  subtotal  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model FixedExpense {
  id          Int      @id @default(autoincrement())
  description String
  value       Float
  date        DateTime @default(now())
  recurring   Boolean  @default(false)
  category    String?
  note        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fixed_expenses")
}

model SupplyPurchase {
  id            Int      @id @default(autoincrement())
  supplier      String?
  purchaseDate  DateTime @default(now())
  paymentMethod String?
  total         Float?
  note          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items PurchaseItem[]

  @@map("supply_purchases")
}

model PurchaseItem {
  id         Int            @id @default(autoincrement())
  purchaseId Int
  purchase   SupplyPurchase @relation(fields: [purchaseId], references: [id])

  supplyId Int
  supply   Supply @relation(fields: [supplyId], references: [id])

  quantity  Float  @default(1) // insumos podem ser fracionados
  unitPrice Float?
  subtotal  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchase_items")
}

model Supply {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  unit        String? // ex.: kg, g, L, pacote
  unitPrice   Float? // preço médio de compra
  stockQty    Float?  @default(0) // estoque do insumo da cliente

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseItems PurchaseItem[]

  @@map("supplies")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
  phone    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  group GroupUser[]

  @@map("users")
}

model Rule {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  groups RuleGroup[]
}

model Group {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  rules RuleGroup[]
  users GroupUser[]
}

model GroupUser {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@unique([userId, groupId], name: "userId_groupId")
}

model RuleGroup {
  id Int @id @default(autoincrement())

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  rule   Rule @relation(fields: [ruleId], references: [id])
  ruleId Int

  @@unique([groupId, ruleId], name: "groupId_ruleId")
}
